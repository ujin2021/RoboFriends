{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","style","width","heigh","CardList","cardComponent","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","useState","setRobots","setSearchfield","count","setCount","useEffect","fetch","response","json","users","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"8LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,eCSCQ,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,cADK,CACL,OAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,GAAMI,MAAO,CAACC,MAAM,IAAKC,MAAM,OAC9E,gCACI,6BAAKR,IACL,4BAAIC,WCeLQ,EAtBE,SAAC,GAAgB,IAIxBC,EAJuB,EAAbC,OAIaC,KAAI,SAACC,EAAMC,GACpC,OACA,cAAC,EAAD,CAEIZ,GAAIW,EAAKX,GACTF,KAAMa,EAAKb,KACXC,MAASY,EAAKZ,OAHTa,MAQb,OACI,aADK,CACL,gBACKJ,KCLEK,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKd,UAAU,MAAf,SACI,uBACIA,UAAY,mCACZe,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCXI,EARA,SAACC,GACZ,OACI,aADK,CACL,OAAKhB,MAAO,CAAEiB,UAAY,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAvE,SACKH,EAAMI,Y,4BCiBJC,E,kDAnBX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,0DAEJG,KAAKV,MAAMI,a,GAhBEQ,a,MC6CbC,MAvCf,WAAe,MAEiBC,mBAAS,IAF1B,mBAEJzB,EAFI,KAEI0B,EAFJ,OAG2BD,mBAAS,IAHpC,mBAGJpB,EAHI,KAGSsB,EAHT,OAIeF,mBAAS,GAJxB,mBAIJG,EAJI,KAIGC,EAJH,KAOXC,qBAAU,WACNC,MAAM,8CACDjD,MAAK,SAAAkD,GAAQ,OAAIA,EAASC,UAC1BnD,MAAK,SAAAoD,GAAK,OAAIR,EAAUQ,MACzBC,QAAQC,IAAIR,KACjB,CAACA,IAGJ,IAIMS,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAMlD,KAAKmD,cAAcC,SAASpC,EAAYmC,kBAEzD,OAAQxC,EAAO0C,OAGP,sBAAKlD,UAAU,KAAf,UACI,6CACA,wBAAQmD,QAAS,kBAAMd,EAASD,EAAQ,IAAxC,uBACA,cAAC,EAAD,CAAWtB,aAbA,SAACsC,GACpBjB,EAAeiB,EAAMC,OAAOC,UAapB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU9C,OAAQqC,WARlC,0CCtBRU,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMhDvE,M","file":"static/js/main.846d4e78.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\n// Card Component \r\n\r\nconst Card = ({name, email, id}) => {// destructuring\r\n    return ( // 하나의 요소만 return 가능\r\n        <div className='bg-light-green dib br3 pd3 ma1 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}`} style={{width:200, heigh:200}} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) {\r\n    //     throw new Error('NOOOOOOOO') // 일부러 eror발생(ErrorBoundary확인용)\r\n    // }\r\n    const cardComponent = robots.map((user, i) => { // map needs return, i for index\r\n        return (\r\n        <Card \r\n            key={i} \r\n            id={user.id} \r\n            name={user.name} \r\n            email = {user.email} \r\n        /> \r\n        )\r\n        // DOM에서 카드 중 일부가 삭제될 때 어느것인지 구분하기 위해 key가 필요하다(loop 돌때 고유한 key를 제공해야 한다)\r\n    })\r\n    return ( // cardComponent 대신 위의 return 값을 넣어줘도 된다\r\n        <div>\r\n            {cardComponent} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => { // searchfield가 있는 이유?\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange} // 변화가 생기면 searchChange 함수를 부른다\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => { // Scroll 에게 props따로 넘겨주지 않아도 children이 존재(CardList)\r\n    return ( // jsx에서 style은 {{}} 사용\r\n        <div style={{ overflowY : 'scroll', border: '1px solid black', height: '500px' }}> \r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component { // component에서 error발생시 여기서 catch\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) { // 만약 error가 발생하면 <h1>을 rendering\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) { // error가 있으면\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children // error가 없으면 children을 render\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { useState, useEffect } from 'react' // Hooks\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll' // scroll을 내려도 검색창이 사라지지 않도록\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css'\r\n\r\n// Hooks : class사용을 피하는 방법(React specific)\r\nfunction App() {\r\n    // constructor()을 useState(hooks)를 사용하여 표현\r\n    const [robots, setRobots] = useState([]) // [] : initial state, 구조화\r\n    const [searchfield, setSearchfield] = useState('')\r\n    const [count, setCount] = useState(0)\r\n\r\n    // componentDidMount()\r\n    useEffect(() => { // useEffect(function, ?)\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => setRobots(users)) // user update robot state -> rerender(infinite loop)\r\n            console.log(count)\r\n    }, [count]) // only run if count chages\r\n    // ? : when should i run useEffect? -> 변경이 있을 때만 useEffect를 실행해라\r\n\r\n    const onSearchChange = (event) => { // arrow function을 사용해야 동작 (SearchBox에서 onChange로 부터 이 함수가 불림. 현재 searchfield를 변화시킴)\r\n        setSearchfield(event.target.value)\r\n    }\r\n\r\n    const filteredRobots = robots.filter(robot => { // 현재 있는 로봇 중 searchfield가 포함된 로봇을 필터링\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase()) \r\n    })\r\n    return !robots.length ? \r\n        <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>  \r\n                <h1>RoboFriends</h1>\r\n                <button onClick={() => setCount(count + 1)}>Click Me!</button>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom' // react 와 browser간 접착제(app간의 접착제는 ReactNative)\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport 'tachyons'\nimport App from './containers/App' // 하나의 큰 구성요소\nimport { robots } from './robots' // default export가 아니면 {}로 감싸줘야함\n\n// main js\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); // app become faster\n"],"sourceRoot":""}